#!/usr/bin/python3
"""Run Tasks in a Window

(c) 2018 Jan Katins

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

import configparser
import functools
import os
import os.path
import re
import shlex
import subprocess
import sys
import threading
from base64 import b64decode
from io import BytesIO
from zlib import decompress

import psutil
import wx
import wx.adv
import wx.richtext as rt
import yaml

ansi_escape = re.compile(r'\x1B\[[0-?]*[ -/]*[@-~]')


class RunTaskModel():

    def __init__(self):
        """Model which holds the config and executes commands asynchronously"""
        self.scriptname = os.path.basename(sys.argv[0])
        self.config_file = os.path.expanduser(f'~/.config/{self.scriptname}.yml')
        self.config = None
        self.init_config()

        # every func which should be called about changed output
        self.output_listener = []
        # Currently running processes which have to be killed
        self.running = []

    def init_config(self):
        self.try_convert_ini_to_yml()
        if not os.path.exists(self.config_file):
            print(f"Creating example config in {self.config_file}...")
            example = {}
            example['name'] = "Run Tasks"
            example['icon'] = "~/path/to/icon.png"
            runners = []
            runners.append({'name': 'Run ls',
                            'cmd': 'ls -la',
                            'autostart': False})
            runners.append({'name': 'Sleep',
                            'cmd': 'while true ; do sleep 1 && echo "I slept..."; done',
                            'autostart': True,
                            'shell': '/bin/bash'})
            example['runners'] = runners
            with open(self.config_file, 'w') as outfile:
                yaml.dump(example, outfile, default_flow_style=False)
        with open(self.config_file, 'r') as f:
            try:
                config = yaml.load(f)
            except yaml.YAMLError as e:
                print(e)
                sys.exit(-1)
        # validation
        for item, default in [('name', 'Run Tasks'), ('icon', '~/path/to/icon.png'), ('runners', [])]:
            if config.get(item) is None:
                print(f"Config was invalid: '{item}' was unset, set to default'")
                config[item] = default
        # copy so we can delete stuff in config
        runners = list(config['runners'])
        for definition in runners:
            if not 'cmd' in definition:
                print(f"Config invalid: runner {definition['name']} does not contain a command. Deleting'")
                config['runners'].remove(definition)
        self.config = config

    def try_convert_ini_to_yml(self):
        ini_file = os.path.expanduser(f'~/.config/{self.scriptname}.ini')
        if os.path.exists(ini_file) and not os.path.exists(self.config_file):
            config = configparser.ConfigParser()
            # make keys case sensitive
            config.optionxform = str
            config.read(ini_file)
            converted = {}
            converted['name'] = config.get('Default', 'name', fallback="Run Tasks")
            converted['icon'] = config.get('Default', 'icon', fallback="~/path/to/icon.png")
            runners = []
            for name, command in dict(config["Runners"]).items():
                runners.append({'name': name,
                                'cmd': command,
                                'autostart': False,
                                'shell': '/bin/bash'})
            converted['runners'] = runners
            with open(self.config_file, 'w') as outfile:
                yaml.dump(converted, outfile, default_flow_style=False)
            print(f"Converted config to yaml: {self.config_file}")

    @property
    def name(self):
        return self.config.get('name', 'Run Tasks')

    @property
    def script_path(self):
        return os.path.abspath(sys.argv[0])

    @property
    def icon_path(self):
        iconpath = self.config.get('icon')
        if iconpath:
            iconpath = os.path.abspath(os.path.expanduser(iconpath))
            if os.path.exists(iconpath):
                return iconpath
        return None

    @property
    def all_runners(self):
        try:
            runners = self.config['runners']
        except:
            msg_no_config = f"No runners found, you need to edit the config '{self.config_file}\n'"
            self.notify_changes(msg_no_config)
            return {}
        return [runner['name'] for runner in runners]

    def get_runner(self, name):
        for runner in self.config['runners']:
            if runner['name'] == name:
                return runner
        raise ValueError(f'Run configuration for "{name}" does not exist in config')

    def notify_changes(self, line: str):
        for listener in self.output_listener:
            listener(line, 'bold')

    def notify_output(self, line: str):
        for listener in self.output_listener:
            listener(line)

    def register_output_listener(self, listener_func):
        self.output_listener.append(listener_func)

    def start_task(self, name, after_callback):
        thread = threading.Thread(target=self._run_task, args=(name, after_callback))
        thread.setDaemon(True)
        thread.start()

    def _run_task(self, name, after_callback):
        runner = self.get_runner(name)
        cmd = runner['cmd']
        shell = runner.get('shell')
        if shell:
            proc = subprocess.Popen([cmd], stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                                    shell=True, executable=shell)
        else:
            proc = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

        self.running.append((name, proc))
        self.notify_changes(f"Started task '{name}' (pid: {proc.pid}, cmd: «{' '.join(proc.args)}»)\n")
        for line in proc.stdout:
            # remove ansi escapes from string
            self.notify_output(ansi_escape.sub('', line.decode('utf8')))
        proc.poll()
        msg_out = f"Task '{name}' exited with '{proc.returncode}'\n"
        self.notify_changes(msg_out)
        self.running.remove((name, proc))
        after_callback()

    def _kill_process(self, proc_pid):
        """Kill the whole process tree of the process"""
        try:
            process = psutil.Process(proc_pid)
            for child in process.children(recursive=True):
                child.terminate()
                child.kill()
            process.terminate()
            process.kill()
        except Exception as e:
            self.notify_changes(f"An error accoured while killing process {proc_pid}: {str(e)}")

    def kill_all_running_tasks(self):
        for name, proc in self.running:
            self.notify_changes(f"Killing task '{name}' with pid {proc.pid}\n")
            self._kill_process(proc.pid)

    def kill_tasks(self, to_be_killed):
        # No callback and no removal because when we kill it, _run_task will run the callback there
        for name, proc in self.running:
            if name == to_be_killed:
                self.notify_changes(f"Killing task '{name}' with pid {proc.pid}\n")
                self._kill_process(proc.pid)


class Frame(wx.Frame):
    def __init__(self, app, model):
        """Window which displays buttons and output"""
        super(Frame, self).__init__(None, -1, model.name)

        self.app = app
        self.model = model
        self.model.register_output_listener(self.output_listener)

        # Build the UI
        self.SetIcon(self.get_icon())
        self.Bind(wx.EVT_ICONIZE, self.on_minimize)
        self.Bind(wx.EVT_CLOSE, self.on_close)

        self.add_menu_bar()
        self.add_main_content()
        self.tbicon = TaskBarIcon(self, model)

        self.text_length = 0

        self.show_window()

    def get_icon(self):
        """An wx.Icon for this app"""
        if self.model.icon_path:
            icon = wx.Icon(self.model.icon_path)
        else:
            icon = get_fallback_icon()
        return icon

    def add_menu_bar(self):
        # from https://wxpython.org/Phoenix/docs/html/richtextctrl_overview.html
        def doBind(item, handler, updateUI=None):
            self.Bind(wx.EVT_MENU, handler, item)
            if updateUI is not None:
                self.Bind(wx.EVT_UPDATE_UI, updateUI, item)

        fileMenu = wx.Menu()
        doBind(fileMenu.Append(-1, "Add desktop Entry", "Add desktop Entry in ~/.config/autostart/"),
               self.on_file_add_desktop_entry)

        doBind(fileMenu.Append(-1, "Add Autostart Entry", "Add Autostart Entry in ~/.local/share/applications"),
               self.on_file_add_autostart_entry)

        doBind(fileMenu.Append(-1, "&Preferences\tCtrl+P", "Open Config file in Editor"),
               self.on_file_preferences)

        doBind(fileMenu.Append(-1, "E&xit\tCtrl+Q", "Quit this program"),
               self.on_file_exit)

        mb = wx.MenuBar()
        mb.Append(fileMenu, "&File")
        self.SetMenuBar(mb)

    def add_main_content(self):
        """Add some buttons and a text control which contains the output"""
        panel = wx.Panel(self, -1)
        sizer = wx.BoxSizer(wx.VERTICAL)
        button_space = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(button_space, 0, wx.ALL, 5)
        for name in self.model.all_runners:
            button = wx.Button(panel, -1, f"Run '{name}'")
            func = functools.partial(self.on_button, button=button, name=name)
            button.Bind(wx.EVT_BUTTON, func)
            button_space.Add(button, 0, wx.ALL, 5)
        self.text = rt.RichTextCtrl(panel, -1, style=wx.TE_MULTILINE | wx.TE_READONLY)
        sizer.Add(self.text, 1, wx.EXPAND | wx.ALL, 5)
        panel.SetSizer(sizer)

    # wiring the UI to the controler/model
    def on_button(self, event, name, button):
        """Start task on button presses"""
        current_label = button.GetLabel()
        if current_label.startswith("Run"):
            def enable_again():
                wx.CallAfter(button.SetLabel, current_label)

            self.model.start_task(name, enable_again)
            button.SetLabel(f"Kill '{name}''")
        if current_label.startswith("Kill"):
            self.model.kill_tasks(name)

    def on_close(self, evt):
        """On close mimimize to tray"""
        self.hide_window()

    def on_minimize(self, event):
        """On minimize mimimize to tray"""
        self.hide_window()

    def on_file_exit(self, event):
        self.shutdown()

    def on_file_add_autostart_entry(self, event):
        self.add_autostart_entry()

    def on_file_add_desktop_entry(self, event):
        self.add_desktop_entry()

    def on_file_preferences(self, event):
        self.open_config_in_editor()

    def _append_line(self, line, style):
        """function to be invoked in the UI Thread with wx.CallAfter(append_line_in_ui_thread, args)"""

        # only after 700 lines reset to 500 to not do it every time
        def last_line():
            return self.text.PositionToXY(self.text.LastPosition)[2]

        def last_visible_line():
            pos = self.text.HitTest((0, self.text.GetSize()[1]))[1]
            return self.text.PositionToXY(pos)[2]

        last = last_line()
        visible = last_visible_line()

        if self.text.GetNumberOfLines() > 700:
            print("Resetting to last 500 lines...")
            self.text.Freeze()
            _tmp = self.text.GetValue()
            cur = _tmp.splitlines()
            new_lines = ['... earlier content discarded ...'] + cur[-500:]
            self.text.SetValue('\n'.join(new_lines))
            if visible >= last:
                self.text.ShowPosition(self.text.GetLastPosition())
            self.text.Thaw()

        self.text.Freeze()
        insert = self.text.GetInsertionPoint()
        self.text.SetInsertionPointEnd()
        if style == 'bold':
            self.text.BeginBold()
        self.text.WriteText(line)
        if style == 'bold':
            self.text.EndBold()
        self.text.SetInsertionPoint(insert)
        if visible >= last:
            self.text.ShowPosition(self.text.GetLastPosition())
        self.text.Thaw()

    def output_listener(self, line, style=None):
        """Listener which adds the line to the text controll"""
        # The listener is outside of the UI thread, so has to use wx.CallAfter(...)!
        wx.CallAfter(self._append_line, line, style)

    def add_autostart_entry(self):
        autostart_content = f"""[Desktop Entry]
Encoding=UTF-8
Name={self.model.name}
Icon={self.model.icon_path or ''}
Exec={self.model.script_path}
Terminal=false
Type=Application
Categories=
"""
        autostart_file = os.path.expanduser(f'~/.config/autostart/{self.model.name}.desktop')
        bcontent = autostart_content.encode('utf8')
        with open(autostart_file, "wb") as fileobj:
            fileobj.write(bcontent)
        self.output_listener(f"Wrote autostart entry: {autostart_file}\n", "bold")

    def add_desktop_entry(self):
        content = f"""[Desktop Entry]
Encoding=UTF-8
Name={self.model.name}
Icon={self.model.icon_path or ''}
Exec={self.model.script_path}
Terminal=false
Type=Application
Categories=
"""
        file_name = os.path.expanduser(f'~/.local/share/applications/{self.model.name}.desktop')
        bcontent = content.encode('utf8')
        with open(file_name, "wb") as fileobj:
            fileobj.write(bcontent)
        self.output_listener(f"Wrote Desktop entry: {file_name}\n", "bold")

    def open_config_in_editor(self):
        subprocess.call(('xdg-open', self.model.config_file))

    # kind of the controller of the thing
    def shutdown(self):
        """Destroy all running tasks, the taskbar icon and the frame
        """
        self.model.kill_all_running_tasks()
        try:
            self.tbicon.RemoveIcon()
            self.tbicon.Destroy()
        except:
            # ignore anything from the icon: it might already went down
            pass
        self.Close()
        self.Destroy()

    def show_window(self):
        """Shows the window (again)"""
        self.Show()
        self.Restore()

    def hide_window(self):
        """Hides the window"""
        self.Hide()


class TaskBarIcon(wx.adv.TaskBarIcon):
    def __init__(self, frame, model):
        self.frame = frame
        self.model = model
        super(TaskBarIcon, self).__init__()
        self.SetIcon(self.frame.get_icon(), self.model.name)
        self.Bind(wx.adv.EVT_TASKBAR_LEFT_DOWN, self.on_left_down)

    def CreatePopupMenu(self):
        menu = wx.Menu()

        def add_menu_item(menu, label, callback):
            item = wx.MenuItem(menu, -1, label)
            if callback:
                menu.Bind(wx.EVT_MENU, callback, id=item.GetId())
            menu.Append(item)
            return item

        has_running_processes = False
        for name, proc in self.model.running:
            has_running_processes = True
            func = functools.partial(self.on_task, name=name)
            add_menu_item(menu, f"Kill '{name}'", func)
        if has_running_processes:
            menu.AppendSeparator()

        add_menu_item(menu, 'Show Window', self.on_show_window)
        menu.AppendSeparator()
        add_menu_item(menu, 'Exit', self.on_exit)
        return menu

    # wiring the UI to the controler/model
    def on_task(self, event, name):
        self.model.kill_tasks(name)

    def on_left_down(self, event):
        self.frame.show_window()

    def on_show_window(self, event):
        self.frame.show_window()

    def on_hide_window(self, event):
        self.frame.hide_window()

    def on_exit(self, event):
        # The frame kills us...
        wx.CallAfter(self.frame.shutdown)


class App(wx.App):

    def OnInit(self):
        model = RunTaskModel()
        frame = Frame(self, model)
        self.SetTopWindow(frame)
        return True


def main():
    app = App(False)
    app.MainLoop()


### Fallback-Icon handling and data

def replace_icon():
    # Icon generated with
    import os.path
    if len(sys.argv) < 2:
        print("ERROR: Need a filename as second argument.")
        sys.exit(-1)
    if not os.path.exists(sys.argv[2]):
        print(f"ERROR: icon file does not exist: '{sys.argv[2]}'.")
        sys.exit(-1)
    from zlib import compress
    from base64 import b64encode
    with open(sys.argv[2], "rb") as fileobj:
        data = b64encode(compress(fileobj.read()))
    with open(__file__, "rb") as fileobj:
        script_content = fileobj.read()
    new_content = []
    next_is_icon = False
    for line in script_content.splitlines():
        if next_is_icon:
            new_content.append(b"ICON_BASE64 = b'" + data + b"'\n")
            next_is_icon = False
            continue
        if line == b'# ###---START-ICON---####':
            next_is_icon = True
        new_content.append(line + b'\n')

    with open(__file__, "wb") as fileobj:
        fileobj.writelines(new_content)
    print(f"Replaced Icon data in Script with {sys.argv[2]}")


def get_fallback_icon():
    icon_data = decompress(b64decode(ICON_BASE64))
    stream = BytesIO(bytes(icon_data))
    image = wx.Image(stream, wx.BITMAP_TYPE_ANY)
    bitmap = wx.Bitmap(image)
    icon = wx.Icon()
    icon.CopyFromBitmap(bitmap)
    return icon


# Original tunnel icon from https://commons.wikimedia.org/wiki/File:Simbol_tunel.svg (Public Domain)
# ###---START-ICON---####
ICON_BASE64 = b''
# ###---END-ICON---####

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == 'replace_icon':
            replace_icon()
            sys.exit(0)
    else:
        main()
